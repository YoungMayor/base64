{"version":3,"file":"base64.js","mappings":"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","sources":["webpack://base64/webpack/universalModuleDefinition","webpack://base64/./src/index.js","webpack://base64/./src/manager.js","webpack://base64/./src/managers/image.js","webpack://base64/./src/managers/pdf.js","webpack://base64/./src/managers/string.js","webpack://base64/./src/utils/helpers.js","webpack://base64/webpack/bootstrap","webpack://base64/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"base64\"] = factory();\n\telse\n\t\troot[\"base64\"] = factory();\n})(self, function() {\nreturn ","const ImageManager = require(\"./managers/image\");\nconst PDFManager = require(\"./managers/pdf\");\nconst StringManager = require(\"./managers/string\");\n\n/**\n * @class Base64\n */\nclass Base64 {\n    /**\n     * The class constructor\n     * @constructor\n     */\n    constructor() {\n        //\n    }\n\n    /**\n     * Encode a string to base64\n     * @param {string} string The string to encode\n     * \n     * @returns {string}\n     * @static\n     */\n    static encodeString(string) {\n        return new Buffer(string).toString('base64')\n    }\n\n    /**\n     * Treat the encoding as a PDF file\n     * @param {string} encoded The base64 encoding of the PDF\n     * \n     * \n     * @returns {PDFManager}\n     * @static\n     */\n    static managePDF(encoded) {\n        return new PDFManager(encoded)\n    }\n\n    /**\n     * Treat the encoding as a simple string\n     * @param {string} encoded The base64 encoding of the string\n     * @param {string} type The type of string\n     * Allowed types are [ calendar, css, csv, html, javascript, plain, xml ]\n     * \n     * \n     * @returns {StringManager}\n     * @static\n     */\n    static manageString(encoded, type = 'plain') {\n        return new StringManager(encoded, type)\n    }\n\n    /**\n     * Treat the encoding as an image\n     * @param {string} encoded The base64 encoding of the image\n     * @param {string} type The type of image\n     * Allowed types are [ bmp, gif, vnd.microsofticon, jpeg, png, svg+xml, tiff, webp ]\n     * \n     * \n     * @returns {ImageManager}\n     * @static\n     */\n    static manageImage(encoded, type = 'png') {\n        return new ImageManager(encoded, type)\n    }\n}\n\nmodule.exports = Base64","const { download, toBlob, toObjectURL, open } = require(\"./utils/helpers\");\n\n/**\n * @class \n * @classdesc The super Manager class for managing the base64 encoding and transforming it\n */\nclass Manager {\n    base64 = null;\n    /**\n     * @private\n     */\n    type = null;\n\n    /**\n     * @constructor\n     * @param {string} base64 The base64 encoding\n     * @param {string} type The type of document\n     * \n     * @returns {null}\n     */\n    constructor(base64, type) {\n        this.base64 = base64\n        this.type = type\n    }\n\n    /**\n     * Convert the encode to a Blob object\n     * @returns {Blob}\n     */\n    toBlob() {\n        return toBlob(this.base64, this.type)\n    }\n\n    /**\n     * Convert the encode to a ObjectURL string\n     * @returns {String}\n     */\n    toObjectURL() {\n        const blob = this.toBlob();\n\n        return toObjectURL(blob)\n    }\n\n    /**\n     * Download the decoded format of the given encode\n     * @param {string} filename The name to save the file as. Defaults  to ```sample_download```\n     * @returns {null}\n     */\n    download(filename) {\n        const url = this.toObjectURL()\n\n        return download(url, filename)\n    }\n\n    /**\n     * Open the decoded format of the given encode in a new tab\n     * @returns {null}\n     */\n    open(filename) {\n        const url = this.toObjectURL()\n\n        return open(url, filename)\n    }\n}\n\nmodule.exports = Manager","const Manager = require('../manager');\n\n/**\n * @class\n * @extends Manager\n * @inheritdoc\n */\nclass ImageManager extends Manager {\n    /**\n     * @constructor ImageManager constructor\n     * \n     * @param {string} base64 The base64 encoding of the image\n     * @param {string} type The type of image\n     * Allowed types are [ bmp, gif, vnd.microsofticon, jpeg, png, svg+xml, tiff, webp ]\n     * \n     * @returns {Manager}\n     */\n    constructor(base64, type = 'plain') {\n        const allowed_types = [\n            'bmp',\n            'gif',\n            'vnd.microsoft.icon',\n            'jpeg',\n            'png',\n            'svg+xml',\n            'tiff',\n            'webp'\n        ]\n\n        if (!allowed_types.indexOf(type) > 0) {\n            type = 'png'\n        }\n        return super(base64, `image/${type}`)\n    }\n}\n\nmodule.exports = ImageManager","const Manager = require(\"../manager\");\n\n/**\n * @class\n * @extends Manager\n * @inheritdoc\n */\nclass PDFManager extends Manager {\n    /**\n     * @constructor PDFManager constructor\n     * \n     * @param {string} base64 The base64 encoding of the image\n     * \n     * @returns {Manager}\n     */\n    constructor(base64) {\n        super(base64, 'application/pdf')\n    }\n}\n\nmodule.exports = PDFManager","const Manager = require('../manager');\n\n/**\n * @class\n * @extends Manager\n * @inheritdoc\n */\nclass StringManager extends Manager {\n    /**\n     * @constructor StringManager constructor\n     * \n     * @param {string} base64 The base64 encoding of the string\n     * @param {string} type The type of string\n     * Allowed types are [ calendar, css, csv, html, javascript, plain, xml ]\n     * \n     * @returns {Manager}\n     */\n    constructor(base64, type = 'plain') {\n        const allowed_types = [\n            'calendar',\n            'css',\n            'csv',\n            'html',\n            'javascript',\n            'plain',\n            'xml'\n        ]\n\n        if (!allowed_types.indexOf(type) > 0) {\n            type = 'plain'\n        }\n        super(base64, `text/${type}`)\n    }\n\n    /**\n     * Decode the provided string\n     * @returns {string}\n     */\n    decodeString() {\n        return new Buffer(this.base64, 'base64').toString('ascii')\n    }\n}\n\nmodule.exports = StringManager","function toBlob(base64_encoding, type) {\n    const byteCharacters = atob(base64_encoding)\n\n    const byteNumbers = new Array(byteCharacters.length)\n    for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i)\n    }\n\n    const byteArray = new Uint8Array(byteNumbers)\n\n    return new Blob([byteArray], {\n        type,\n    })\n}\n\nfunction toObjectURL(blob) {\n    return window.URL.createObjectURL(blob)\n}\n\nfunction download(url, fileName) {\n    if (!fileName) {\n        fileName = `sample_download`\n    }\n\n    var link = document.createElement('a')\n    link.href = url\n    link.download = fileName\n    link.click()\n\n    return;\n}\n\nfunction open(url) {\n    var link = document.createElement('a')\n    link.href = url\n    link.target = '_blank'\n    link.click()\n\n    return;\n}\n\n\nmodule.exports = {\n    toBlob,\n    toObjectURL,\n    download,\n    open\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(138);\n"],"names":["root","factory","exports","module","define","amd","self","ImageManager","PDFManager","StringManager","constructor","string","Buffer","toString","encoded","type","download","toBlob","toObjectURL","open","base64","this","blob","filename","url","Manager","indexOf","super","decodeString","base64_encoding","byteCharacters","atob","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","window","URL","createObjectURL","fileName","link","document","createElement","href","click","target","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}